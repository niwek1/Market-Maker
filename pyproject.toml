[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mm-bot"
version = "0.1.0"
description = "Professional market making bot with Avellaneda-Stoikov strategy"
authors = [{name = "MM Bot Team", email = "team@mmbot.dev"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "ccxt>=4.1.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyyaml>=6.0.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "websockets>=11.0.0",
    "aiohttp>=3.9.0",
    "matplotlib>=3.7.0",
    "prometheus_client>=0.17.0",
    "structlog>=23.1.0",
    "loguru>=0.7.0",
    "pytz>=2023.3",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "requests>=2.31.0",
    "eth-account>=0.9.0",
    "web3>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.4.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

docker = [
    "gunicorn>=21.2.0",
]

[project.scripts]
mm-backtest = "mm_bot.scripts.run_backtest:main"
mm-paper = "mm_bot.scripts.run_paper:main"
mm-live = "mm_bot.scripts.run_live:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["mm_bot*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B006",  # do not use mutable data structures for argument defaults
    "C901",  # too complex
    "SIM108", # if-else-block-instead-of-if-exp
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "ccxt_pro.*",
    "numba.*",
    "prometheus_client.*",
    "matplotlib.*",
    "seaborn.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mm_bot"]
omit = [
    "*/tests/*",
    "*/scripts/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
